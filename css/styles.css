@charset "UTF-8";
/**
 * @author Prénom Nom courriel
**/
/**
 * ------------------
 * TABLE DES MATIÈRES
 * ------------------
 * BIBLIOTHÈQUES (dans le dossier bower_components)
 ** Normalize
 ** Susy
 * UTILITAIRES
 ** variables
 ** mixins
 * BASE
 ** Charte typographique responsive
 *
 * ...
 */
/*** Normalize ***/
/*! normalize.scss v0.1.0 | MIT License | based on git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
@import url("https://fonts.googleapis.com/css?family=Kanit:400,700,900&display=swap");
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

/*** Utilitaires ***/
/**
 * @author Prénom Nom courriel
 * @todo ADAPTER ce fichier au besoin
 * ----------------------------
 * TABLE DES MATIÈRES - MIXINS
 * ----------------------------
 * base (BoxSizing, Clearfix)
 * accessibilité
 * typographie
 * @todo Personnaliser au besoin
 */
/******** Utilitaires de base (BoxSizing, Clearfix) *********/
/* BoxSizing */
/* Clearfix: pour contrer le problème des enfants flottants*/
.cf:after {
  content: " ";
  display: table;
  clear: both;
}

/******** Utilitaires pour accessibilité *********/
.visuallyhidden,
.screen-reader-only {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.visuallyhidden.focusable:active, .visuallyhidden.focusable:focus,
.screen-reader-only.focusable:active,
.screen-reader-only.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  white-space: normal;
  width: auto;
}

/******** Utilitaires pour typographie *********/
/* Utilitaire de mise en page */
/**
 * @author Samuel Loranger <samuelloranger@gmail.com>
 * ------------------
 * TABLE DES MATIÈRES
 * ------------------
 * Polices de caractères
 * Palette de couleurs
 * Points de rupture
 **/
/** Polices de caractères **/
@font-face {
  font-family: "Kanit-Bold";
  src: url("../assets/fonts/Kanit/Kanit-Bold.ttf") format("truetype");
}

@font-face {
  font-family: "Kanit-Regular";
  src: url("../assets/fonts/Kanit/Kanit-Regular.ttf") format("truetype");
}

/** Palette de couleurs **/
/** Points de rupture **/
/* tablet, landscape iPad, lo-res laptops ands desktops */
/* hi-res laptops and desktops */
/*** Base ***/
/**
 * @author Prénom Nom courriel
 * @todo ADAPTER ce fichier selon le projet
**/
/**
 * --------------------------------------------------------
 * TABLE DES MATIÈRES - Typographie responsive (Mobile First)
 * --------------------------------------------------------
 * Base décimale
 * Hiérarchie responsive
 */
/** Base décimale **/
html {
  font-size: 62.5%;
}

body {
  /* 16px pour toutes les largeurs d'écran */
  font-size: 16px;
  font-size: 1.6rem;
  /* facteur multiplicateur de la taille de la police 1.375x16 = 22 */
  line-height: 1.375;
}

@media (min-width: 600px) {
  body {
    line-height: 1.5;
  }
}

@media (min-width: 1000px) {
  body {
    line-height: 1.75;
  }
}

/** Hiérarchie responsive **/
/*  plus proche = plus petit  &  plus loin = plus grand */
h1, h2, h3, h4, h5 {
  font-family: "Kanit-Bold", Arial-Black, sans-serif;
}

body, p, span, input, label, a {
  font-family: "Kanit-Regular", Arial, serif;
}

label {
  font-size: 24px;
  font-size: 2.4rem;
}

a {
  color: #EB3125;
  text-decoration: none;
  transition: 0.15s ease-in-out;
}

a:hover, a visited {
  color: #6d100a;
}

/* TITRES NIVEAU 1 */
h1,
.h1 {
  /* = 32px */
  font-size: 38px;
  font-size: 3.8rem;
}

/* TITRES NIVEAU 2 */
h2,
.h2 {
  /* = 24px */
  font-size: 22px;
  font-size: 2.2rem;
}

@media (min-width: 600px) {
  h2,
  .h2 {
    /* = 32px */
    font-size: 30px;
    font-size: 3rem;
  }
}

/* TITRES NIVEAU 3 */
h3,
.h3 {
  /* = 18px */
  font-size: 20px;
  font-size: 2rem;
}

@media (min-width: 600px) {
  h3,
  .h3 {
    /* = 24px */
    font-size: 28px;
    font-size: 2.8rem;
  }
}

/* TITRES NIVEAU 4 */
h4,
.h4 {
  /* = 16px */
  font-size: 16px;
  font-size: 1.6rem;
}

@media (min-width: 600px) {
  h4,
  .h4 {
    /* = 18px */
    font-size: 18px;
    font-size: 1.8rem;
  }
}

@media (min-width: 1000px) {
  h4,
  .h4 {
    /* = 22px */
    font-size: 22px;
    font-size: 2.2rem;
  }
}

/*** Modules ***/
/**
 * @author Samuel Loranger <samuelloranger@gmail.com>
 */
.conteneur-fluid {
  width: 100%;
}

.conteneur {
  max-width: 1000px;
  margin: 0 auto;
}

.validation--erreur {
  color: #EB3125;
  width: 85%;
  margin: 0 auto;
  font-size: 18px;
}

.validationContainer--erreur {
  border: 3px solid #EB3125;
}

noscript p {
  width: 100%;
  background-color: #EB3125;
  text-align: center;
  color: white;
  font-family: "Kanit-Bold", Arial-Black, sans-serif;
  font-size: 20px;
  font-size: 2rem;
  margin: 0;
}

.bouton {
  width: 160px;
  height: 42px;
  text-align: center;
  border: 3px solid #EB3125;
  color: #EB3125;
  font-size: 16px;
  font-size: 1.6rem;
  box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.4);
  font-family: "Kanit-Bold", Arial-Black, sans-serif;
}

@media (min-width: 800px) {
  .bouton {
    width: 230px;
    height: 55px;
    font-size: 25px;
    font-size: 2.5rem;
  }
}

.boutonSuivant {
  border: 3px solid transparent;
  color: black;
  background-color: #EB3125;
}

/**
 * Formulaires et étapes de formulaires
 */
/**
 * Les régles CSS qui sont sous .js sont lues seulement lorsque le javascript est activé sur la page
 * Sinon, les règles de bases sont lues
 */
.js {
  /**
   * Zone étapes
   */
  /**
   * Zone cachée
   */
}

.js .etapes {
  display: block;
  padding: 0;
  margin: 0 auto 2% auto;
  list-style-type: none;
}

@media (min-width: 800px) {
  .js .etapes {
    display: flex;
    max-width: 815px;
  }
}

.js .etapes .elementMenu {
  width: 160px;
  height: 42px;
  margin: 2% auto 0 auto;
  text-align: center;
  background-color: #E0E0E0;
  display: flex;
  flex-direction: column;
  justify-content: center;
  font-size: 20px;
  font-size: 2rem;
  box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.4);
}

@media (min-width: 800px) {
  .js .etapes .elementMenu {
    width: 260px;
    height: 64px;
    font-size: 30px;
    font-size: 3rem;
  }
}

.js .etapes .elementMenu__courant {
  background-color: #EB3125;
  font-family: "Kanit-Bold", Arial-Black, sans-serif;
}

.js #btnZone1Suivant, .js #btnZone2Suivant, .js #btnZone2Precedent, .js #btnZone3Precedente {
  display: inline-block;
}

.js #conteneurBoutonsZone3 {
  justify-content: space-between;
}

.etapes {
  display: none;
}

.formulaire {
  /**
   * Correctifs des zones de formulaires pour des styles spécifiques à certaines zones formulaires
   */
}

.formulaire__entete h1 {
  text-align: center;
  margin-top: 0;
}

.formulaire fieldset {
  border: 4px solid #707070;
  margin-bottom: 2%;
  /**
     * Zone des boutons radios (Genre de l'utilisateur + genre recherché
     */
  /**
     * Éléments de formulaires
     */
}

.formulaire fieldset legend {
  font-family: "Kanit-Bold", Arial-Black, sans-serif;
  padding: 0 2% 0 2%;
  font-size: 24px;
  font-size: 2.4rem;
  text-shadow: 0 3px 6px rgba(0, 0, 0, 0.16);
}

@media (min-width: 600px) {
  .formulaire fieldset legend {
    font-size: 30px;
    font-size: 3rem;
  }
}

.formulaire fieldset .conteneurFieldset {
  width: 92%;
  margin: 0 auto;
}

@media (min-width: 600px) {
  .formulaire fieldset .conteneurFieldset {
    width: 85%;
  }
}

.formulaire fieldset .zoneBtnRadios {
  display: flex;
  flex-direction: column;
}

@media (min-width: 600px) {
  .formulaire fieldset .zoneBtnRadios {
    flex-direction: row;
    justify-content: space-between;
  }
}

.formulaire fieldset .radioBtn {
  display: flex;
  align-items: center;
  margin-bottom: 5%;
  /**
       * Puisque l'icône est dans le label, on doit mettre le label en display flex
       */
  /**
       * Zone cachée
       */
  /**
       * Lorsque le input est coché, on change les images de background des icônes respectifs
       */
}

@media (min-width: 600px) {
  .formulaire fieldset .radioBtn {
    margin-top: 2%;
    margin-bottom: 2%;
    width: 27.5%;
  }
  .formulaire fieldset .radioBtn:nth-of-type(3n) {
    width: 45%;
  }
}

.formulaire fieldset .radioBtn input {
  opacity: 0;
}

.formulaire fieldset .radioBtn label {
  width: 100%;
  display: flex;
  align-items: center;
}

.formulaire fieldset .radioBtn label .icone {
  display: inline-block;
  background-image: url("../assets/images/icones/sprites-icones.svg");
  background-size: 200px;
  background-repeat: no-repeat;
  min-width: 50px;
  min-height: 50px;
  top: 0;
  left: 0;
  margin-right: 2%;
}

.formulaire fieldset .radioBtn label .icone--femme {
  background-position: 0 0;
}

.formulaire fieldset .radioBtn label .icone--homme {
  background-position: -50px 0;
}

.formulaire fieldset .radioBtn label .icone--autre {
  background-position: -100px 0;
}

.formulaire fieldset .radioBtn input:focus + label {
  outline-color: #4d90fe;
  outline-offset: -2px;
  outline-style: auto;
  outline-width: 5px;
}

.formulaire fieldset .radioBtn input:checked + label .icone--femme {
  background-position: 0 -50px;
}

.formulaire fieldset .radioBtn input:checked + label .icone--homme {
  background-position: -50px -50px;
}

.formulaire fieldset .radioBtn input:checked + label .icone--autre {
  background-position: -100px -50px;
}

.formulaire fieldset .elementForm {
  display: flex;
  flex-direction: column;
  position: relative;
}

.formulaire fieldset .elementForm input, .formulaire fieldset .elementForm select {
  border: 3px solid black;
  width: 240px;
  padding-left: 3px;
}

@media (min-width: 600px) {
  .formulaire fieldset .elementForm input, .formulaire fieldset .elementForm select {
    width: 350px;
  }
}

.formulaire fieldset .elementForm select {
  width: 250px;
  -webkit-appearance: none;
  -webkit-border-radius: 0px;
  background-image: linear-gradient(45deg, transparent 50%, black 50%), linear-gradient(135deg, black 50%, transparent 50%);
  background-position: calc(100% - 25px) calc(1em + 5px), calc(100% - 15px) calc(1em + 2px), calc(100% - 2.5em) 0.5em;
  background-position-y: 10px;
  background-size: 10px 10px, 10px 10px, 5px 2.5em;
  background-repeat: no-repeat;
}

@media (min-width: 600px) {
  .formulaire fieldset .elementForm select {
    width: 360px;
  }
}

.formulaire fieldset .elementForm:last-of-type .checkBoxMontrerMDP {
  background-image: url("../assets/images/icones/sprites-icones.svg");
  background-size: 100px;
  background-repeat: no-repeat;
  background-position: 0 -50px;
  width: 25px;
  height: 25px;
  position: absolute;
  bottom: 3px;
  left: 215px;
}

@media (min-width: 600px) {
  .formulaire fieldset .elementForm:last-of-type .checkBoxMontrerMDP {
    left: 320px;
  }
}

.formulaire fieldset .elementForm:last-of-type #montrerMDP:checked + label {
  background-position: -25px -50px;
}

.formulaire .zoneForm {
  padding: 0 2% 0 2%;
}

.formulaire .zoneForm1, .formulaire .zoneForm2, .formulaire .zoneForm3 {
  margin-bottom: 3%;
}

.formulaire .zoneForm1__cache, .formulaire .zoneForm2__cache, .formulaire .zoneForm3__cache {
  display: none;
}

.formulaire .zoneForm1 .conteneurBoutons, .formulaire .zoneForm2 .conteneurBoutons, .formulaire .zoneForm3 .conteneurBoutons {
  display: flex;
  justify-content: flex-end;
}

.formulaire .zoneForm1 .conteneurBoutons button, .formulaire .zoneForm2 .conteneurBoutons button, .formulaire .zoneForm3 .conteneurBoutons button {
  display: none;
}

.formulaire .zoneForm1 .conteneurBoutons #btnSoumetre, .formulaire .zoneForm2 .conteneurBoutons #btnSoumetre, .formulaire .zoneForm3 .conteneurBoutons #btnSoumetre {
  display: block;
}

.formulaire .zoneForm2 .conteneurBoutons {
  justify-content: space-between;
}

/**
 * @author Samuel Loranger <samuelloranger@gmail.com>
 */
header {
  display: flex;
  flex-direction: column;
  padding: 2%;
}

@media (min-width: 600px) {
  header {
    width: 100%;
    padding: 0;
    flex-direction: row;
    justify-content: space-between;
  }
}

header .conteneurLogo {
  width: 100%;
}

@media (min-width: 600px) {
  header .conteneurLogo {
    padding: 2%;
    width: 50%;
  }
}

header .conteneurLogo .logo {
  width: 100%;
  max-width: 535px;
  -webkit-filter: drop-shadow(0px 3px 6px rgba(0, 0, 0, 0.4));
  filter: drop-shadow(0px 3px 6px rgba(0, 0, 0, 0.4));
}

header .conteneurLogo h2 {
  margin: 0;
  text-align: center;
}

@media (min-width: 600px) {
  header .conteneurLogo h2 {
    text-align: left;
  }
}

header p {
  text-align: right;
  padding-right: 2%;
  width: 100%;
  font-family: "Kanit-Bold", Arial-Black, sans-serif;
  font-size: 20px;
  font-size: 2rem;
}

@media (min-width: 600px) {
  header p {
    width: 30%;
    font-size: 30px;
    font-size: 3rem;
  }
}

/**
 * @author Samuel Loranger <samuelloranger@gmail.com>
 */
footer {
  margin-top: 5%;
}

footer small {
  display: block;
  text-align: center;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
